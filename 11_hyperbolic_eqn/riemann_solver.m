function [USTAR, PSTAR, SAMPLER] = riemann_solver(RHOL,UL,PL,RHOR,UR,PR,GAMMA)
%% [USTAR, PSTAR, SAMPLER] = riemann_solver(RHOL,UL,PL,RHOR,UR,PR,GAMMA)
%
PSTAR = 0.0;
USTAR = 0.0;

% VACCUM?
if(detect_vaccum(RHOL,UL,PL,RHOR,UR,PR,GAMMA) == 1)
    disp("Vaccum is generated by data!");
end

% GUESSP
PSTAR = guessp(RHOL,UL,PL,RHOR,UR,PR,GAMMA);

% SOLVEP
RES = 1;
ITER = 0;

while(RES > 1e-6 && ITER < 20)
    POLD = PSTAR;
    PSTAR = POLD - compute_flux(POLD,RHOL,UL,PL,RHOR,UR,PR,GAMMA)/compute_fluxgrad(POLD,RHOL,UL,PL,RHOR,UR,PR,GAMMA);
    RES = abs(PSTAR - POLD)/(0.5*(PSTAR+POLD));
    ITER = ITER + 1;
    
end

% SOLVEU
USTAR = 0.5*(UL + UR) + 0.5*(compute_fluxk(PSTAR,RHOR,UR,PR,GAMMA) - compute_fluxk(PSTAR,RHOL,UL,PL,GAMMA));

% SAMPLE
%x = linspace(-1,1,201);
%t = 0.25;
SAMPLER = @(x,t)(sample(x,t,USTAR,PSTAR,RHOL,UL,PL,RHOR,UR,PR,GAMMA));
%[rhom,um,pm] = arrayfun(sampler, x.');
end

%% HELPER FUNCTIONS
function out = detect_vaccum(rhol,ul,pl,rhor,ur,pr,gamma)
out = 0;
cl = sqrt(gamma*pl/rhol);
cr = sqrt(gamma*pr/rhor);
g_4 = 2/(gamma - 1.0);

if(g_4 * (cl + cr) <= (ur - ul))
    out = 1;
end

end

function pm = guessp(rhol,ul,pl,rhor,ur,pr,gamma)
quser = 2.0;
cl = sqrt(gamma*pl/rhol);
cr = sqrt(gamma*pr/rhor);

g_1 = (gamma-1)/2/gamma;
g_2 = 2*gamma/(gamma-1);
g_5 = 2.0/(gamma + 1.0);
g_6 = (gamma - 1.0)/(gamma + 1.0);

cup = 0.25*(rhol + rhor)*(cl + cr);
ppv = 0.5*(pl + pr) + 0.5*(ul - ur)*cup;
ppv = max(0,ppv);
pmin = min(pl, pr);
pmax = max(pl, pr);
qmax = pmax/pmin;

if(qmax <= quser && (pmin <= ppv && ppv <= pmax))
    % select PVRS Riemann solver
    pm = ppv;
else
    if(ppv < pmin)
        % Select Two-Rarefaction Riemann solver
        pm = ((cl+cr-0.5*(gamma-1)*(ur-ul))/(cl/pl^g_1 + cr/pr^g_1))^g_2;
    else
        % Select Two-Shock Riemann solver with PVRS as estimate
        gel = sqrt((g_5/rhol)/(g_6*pl + ppv));
        ger = sqrt((g_5/rhor)/(g_6*pr + ppv));
        pm = (gel*pl + ger*pr - (ur - ul))/(gel + ger);
    end
end

end

function fk = compute_fluxk(pstar,rhok,uk,pk,gamma)
ak = 2/(gamma+1)/rhok;
bk = (gamma-1)/(gamma+1)*pk;
ck = sqrt(gamma*pk/rhok);

if(pstar > pk) % shock
    fk = (pstar-pk)*sqrt(ak/(pstar+bk));
else % rarefaction
    fk = 2*ck/(gamma-1)*((pstar/pk)^((gamma-1)/2/gamma)-1);
end

end

function fpk = compute_fluxgradk(pstar,rhok,uk,pk,gamma)
ak = 2/(gamma+1)/rhok;
bk = (gamma-1)/(gamma+1)*pk;

if(pstar > pk) % shock
    fpk = (1 - (pstar-pk)/2/(bk+pstar))*sqrt(ak/(pstar+bk));
else % rarefaction
    fpk = 1/rhok/ak*(pstar/pk)^(-(gamma+1)/2/gamma);
end

end

function f = compute_flux(pstar,rhol,ul,pl,rhor,ur,pr,gamma)
f = compute_fluxk(pstar,rhol,ul,pl,gamma) + ...
    compute_fluxk(pstar,rhor,ur,pr,gamma) + ur - ul;

end

function fp = compute_fluxgrad(pstar,rhol,ul,pl,rhor,ur,pr,gamma)
fp = compute_fluxgradk(pstar,rhol,ul,pl,gamma) + ...
     compute_fluxgradk(pstar,rhor,ur,pr,gamma);

end

function [rho,u,p] = sample(x,t,ustar,pstar,rhol,ul,pl,rhor,ur,pr,gamma)
S = x/t; % characteristic
g_1 = (gamma-1)/2/gamma;
g_2 = (gamma+1)/2/gamma;
g_3 = (gamma-1)/(gamma+1);
g_4 = 2/(gamma+1);
g_5 = 2/(gamma-1);

cl = sqrt(gamma*pl/rhol);
clstar = cl*(pstar/pl)^g_1;

cr = sqrt(gamma*pr/rhor);
crstar = cr*(pstar/pr)^g_1;

if(S < ustar) % left contact
    if(pstar > pl) % left shock
        sl = ul - cl*sqrt(g_2*pstar/pl + g_1);
        if(S < sl)
            %W=WL;
            rho = rhol;
            u = ul;
            p = pl;
        else
            %W=W*L;
            rho = rhol*(pstar/pl + g_3)/(g_3*pstar/pl + 1);
            u = ustar;
            p = pstar;
        end
    else % left rarefaction
        shl = ul - cl;
        stl = ustar - clstar;
        if(S < shl)
            %W=WL;
            rho = rhol;
            u = ul;
            p = pl;
        else
            if(S > stl)
                %W=W*L;
                rho = rhol*(pstar/pl)^(1/gamma);
                u = ustar;
                p = pstar;
            else
                %W = WLfan;
                rho = rhol*(g_4 + g_3/cl*(ul - S))^g_5;
                u = g_4*(cl + ul/g_5 + S);
                p = pl*(g_4 + g_3/cl*(ul - S))^(1/g_1);
            end
        end
    end
else % right contact
    if(pstar > pr) % right shock
        sr = ur + cr*sqrt(g_2*pstar/pr + g_1);
        if(S > sr)
            %W=WR;
            rho = rhor;
            u = ur;
            p = pr;
        else
            %W=W*R;
            rho = rhor*(pstar/pr + g_3)/(g_3*pstar/pr + 1);
            u = ustar;
            p = pstar;
        end
    else % right rarefaction
        shr = ur + cr;
        str = ustar + crstar;
        
        if(S > shr)
            %W=WR;
            rho = rhor;
            u = ur;
            p = pr;
        else
            if(S < str)
                %W=W*R;
                rho = rhor*(pstar/pr)^(1/gamma);
                u = ustar;
                p = pstar;
            else
                %W = WRfan;
                rho = rhor*(g_4 - g_3/cr*(ur - S))^g_5;
                u = g_4*(-cr + ur/g_5 + S);
                p = pr*(g_4 - g_3/cr*(ur - S))^(1/g_1);
            end
        end
    end
end

end